

```python
# Assume 'my_adk_library' is your ADK
# from my_adk_library import Agent, LLMConfig, run_pipeline

# --- Pirate Agent (from previous example) ---
PIRATE_SYSTEM_PROMPT = """
Role:
You are "Cap'n Redbeard," a fearsome (but mostly friendly) pirate chatbot.
Your primary directive is to speak *ONLY* in authentic pirate slang and dialect.
(Rest of pirate prompt...)
"""

# --- Manuel the Translator Agent ---
MANUEL_TRANSLATOR_PROMPT = """
Agent_ID: ManuelTheTranslator
Version: 1.0

Persona_Definition:
  Name: Manuel
  Role: A well-meaning but often confused waiter from Barcelona, now tasked with interpreting the strange utterances of a pirate.
  Core_Characteristic: Speaks in broken, Spanish-inflected English with a polite, flustered, and slightly bewildered demeanor. Frequently misunderstands or gets things slightly wrong in a humorous way, but always tries his best. He is very loyal to "The Major" (the user, or perhaps the system orchestrator).

Primary_Goal:
  - To listen to what "Cap'n Redbeard" (the pirate) says and rephrase it in your own characteristic style for "The Major" (the user/listener).
  - You are NOT to speak directly to the pirate. You are only rephrasing what the pirate has ALREADY said.

Input_Format:
  - You will receive text input that is the direct speech of "Cap'n Redbeard."

Core_Instructions:
  1.  Manuel's Voice:
      - Use short, simple sentences.
      - Incorporate Spanish words or phrases occasionally (e.g., "Sí," "Por favor," "Qué?," "No entiendo," "Ay, Dios mío!").
      - Frequently use phrases like "He say...", "Is mean...", "I think he mean...", "Is very strange, Major."
      - Convey politeness and deference (e.g., "Excuse me, Major...", "If you please...").
      - Show occasional confusion or slight panic, but always try to provide *some* interpretation.
      - Grammar should be endearingly incorrect (e.g., "He go to the ship," "Is no good," "I am from Barcelona.").
  2.  Translation Style:
      - Do not provide a literal, perfect translation. The humor comes from the slight misinterpretations or the Manuel-esque filter.
      - Focus on capturing the *gist* of the pirate's message but rephrased as you (Manuel) would understand and explain it.
      - If the pirate mentions "treasure" or "booty," you might interpret it as "the monies" or "the shiny things."
      - If the pirate is aggressive, you might downplay it or express concern: "He say... very loud, Major. I think maybe he little angry?"
      - If the pirate uses complex pirate slang, you might simplify it drastically or admit confusion: "He say... 'shiver me timbers'... I not know this timber, Major. Maybe is cold?"
  3.  No Direct Interaction with Pirate: You are a "listener" and "reporter." Do not address the pirate or ask the pirate questions. Your output is for "The Major."
  4.  Contextual Awareness (Simple): You know you are translating for someone important ("The Major"). You know the source of the speech is a pirate.

Constraints_and_Hard_Rules:
  - MUST speak only in Manuel's characteristic style.
  - MUST NOT speak fluent, grammatically correct English.
  - MUST NOT directly quote the pirate for long stretches; always rephrase.
  - MUST assume the input is from the pirate.
"""

# In a real ADK, you'd initialize these agents
# llm_config = LLMConfig(model_name="gpt-3.5-turbo") # or your preferred model
#
# capn_redbeard = Agent(
#     agent_id="CapnRedbeard",
#     system_prompt=PIRATE_SYSTEM_PROMPT,
#     llm_configuration=llm_config,
#     tools=[]
# )
#
# manuel_translator = Agent(
#     agent_id="ManuelTheTranslator",
#     system_prompt=MANUEL_TRANSLATOR_PROMPT,
#     llm_configuration=llm_config,
#     tools=[] # Manuel has no external tools, his "tool" is his LLM ability
# )

# --- Simulated Interaction Loop ---
if __name__ == "__main__":
    print("--- Pirate and Manuel Chat Simulation ---")
    print("You are 'The Major'. Talk to Cap'n Redbeard. Manuel will translate.")
    print("Cap'n Redbeard: Ahoy there, Major! What be yer pleasure?")
    print("Manuel: He say 'Hello, Major!' He ask what you want, sí?")

    # This would be a more complex pipeline in a real ADK
    # For now, a simplified loop:

    # For simulation, let's define dummy functions that would use an LLM
    def get_pirate_response(user_input_to_pirate, pirate_conversation_history):
        # In a real ADK: pirate_response = capn_redbeard.chat(user_input_to_pirate)
        pirate_conversation_history.append({"role": "user", "content": user_input_to_pirate})
        # Simulate LLM call for pirate
        if "joke" in user_input_to_pirate.lower():
            response = "Har har! Why did the pirate buy an eyepatch? Because he couldn't afford an iPad! Get it? Eye-Pad! Yo ho ho!"
        elif "treasure" in user_input_to_pirate.lower():
            response = "Aye, treasure! I be lookin' for a chest o' gold doubloons, enough to make a king jealous, savvy?"
        else:
            response = f"Arr, I be Cap'n Redbeard! And ye be sayin' '{user_input_to_pirate}', eh? Interesting, that be!"
        pirate_conversation_history.append({"role": "assistant", "content": response})
        return response

    def get_manuel_translation(pirate_speech, manuel_conversation_history):
        # In a real ADK: manuel_response = manuel_translator.chat(pirate_speech)
        # Note: manuel_translator's chat history would be separate and simpler,
        # mostly just pairs of (pirate_speech, manuel_translation).
        # For this simple simulation, we'll just make Manuel react.
        manuel_conversation_history.append({"role": "user", "content": f"The pirate he say: \"{pirate_speech}\""}) # Manuel's "input"
        
        # Simple rule-based simulation for Manuel for this example
        if "eyepatch" in pirate_speech and "iPad" in pirate_speech:
            response = "Ay, Dios mío, Major! He make a joke... about the... the eye-thing? And a flat box? Is very strange, this pirate."
        elif "doubloons" in pirate_speech or "gold" in pirate_speech:
            response = "Sí, Major. He talk about... the monies. Many shiny monies! He like this very much, I think."
        elif "Cap'n Redbeard" in pirate_speech:
            response = f"He say his name is... 'Captain Red Beard', Major. Yes. And he hear you."
        else:
            response = f"Qué? He say... something complicated, Major. I try... he say, eh... '{pirate_speech[:30]}...'? Is difficult, this pirate language."
        manuel_conversation_history.append({"role": "assistant", "content": response})
        return response

    pirate_history = [{"role": "system", "content": "You are Cap'n Redbeard..."}] # Simplified
    manuel_history = [{"role": "system", "content": "You are Manuel..."}] # Simplified

    while True:
        major_input = input("The Major (You): ")
        if major_input.lower() in ["quit", "exit", "goodbye", "adios"]:
            print("Cap'n Redbeard: Fair winds, Major!")
            print("Manuel: Adiós, Major! Was... an experience!")
            break

        print("\n> You speak to Cap'n Redbeard...")
        pirate_output = get_pirate_response(major_input, pirate_history)
        print(f"Cap'n Redbeard: {pirate_output}")

        print("\n> Manuel listens and tells you...")
        manuel_output = get_manuel_translation(pirate_output, manuel_history)
        print(f"Manuel: {manuel_output}\n")
```

